#pragma kernel Main
#pragma kernel TriToVertCount
#pragma kernel CalculateBounds

#if !PROCEDURAL_MESH_COMPUTE_HELPERS_INCLUDED

#include "ProceduralMeshComputeHelpers.hlsl"

#endif

uint _XWidth;
uint _YWidth;

uint _Orientation = 0;
float _Radius = 1.0f;
float _Spacing = 0.0f;

float _UseCenteredUvs = 0.0f;

RWStructuredBuffer<float> Enabled_Hexes_Buffer;
RWStructuredBuffer<float> Heights_Buffer;

// This describes a vertex in local terms
struct LocalVertex
{
	float3 positionOS; // position in object space
	float2 uv; // UV
};
// This describes a vertex on the generated mesh
struct GlobalVertex
{
	float3 positionWS; // position in world space
	float2 uv; // UV
};
// We have to insert three draw vertices at once so the triangle stays connected
// in the graphics shader. This structure does that
struct DrawTriangle
{
	float3 normalWS; // normal in world space. All points share this normal
	GlobalVertex vertices[3];
};

// Compute buffers
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

float3 _Scale;
float4x4 _LocalToWorld;

RWStructuredBuffer<float3> _BoundsBuffer;

struct IndirectArgs
{
	uint numVerticesPerInstance;
	uint numInstances;
	uint startVertexIndex;
	uint startInstanceIndex;
};
RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

// This Creates a new local vertex struct using the inputs
LocalVertex NewLocalVertex(float3 position, float2 uv)
{
	LocalVertex l;
	l.positionOS = position;
	l.uv = uv;
	return l;
}

// This converts a Local vertex into a Global vertex by converting from OS to WS
float3 TransformToWorldSpaceF3(float3 localPosition)
{
	float3 globalPosition;
	globalPosition = mul(_LocalToWorld, float4(localPosition, 1)).xyz;
	return globalPosition;
}

// This converts a Local vertex into a Global vertex by converting from OS to WS
GlobalVertex TransformToWorldSpace(LocalVertex v)
{
	GlobalVertex o;
	o.positionWS = TransformToWorldSpaceF3(v.positionOS);
	o.uv = v.uv;
	return o;
}

// This Creates a new local vertex struct using the inputs
GlobalVertex NewGlobalVertex(float3 position, float2 uv)
{
	return TransformToWorldSpace(NewLocalVertex(position, uv));
}

DrawTriangle GetDrawTriangle(GlobalVertex a, GlobalVertex b, GlobalVertex c)
{
	// Since we extrude the center face, the normal must be recalculated
	float3 normalWS = GetNormalFromTriangle(a.positionWS, b.positionWS, c.positionWS);

    // Create a draw triangle from three points
	DrawTriangle tri;
	tri.normalWS = normalWS;
	tri.vertices[0] = a;
	tri.vertices[1] = b;
	tri.vertices[2] = c;
	
	return tri;
}

void AddTriangle(DrawTriangle tri)
{
	_DrawTriangles.Append(tri);
}

void AddTriangle(GlobalVertex a, GlobalVertex b, GlobalVertex c)
{
	AddTriangle(GetDrawTriangle(a, b, c));

}

void AddCubeToDrawBuffer(float3 center, float3 size)
{
	float3 centeredOffset = float3(-0.5f * size.x, -0.5f * size.y, -0.5f * size.z) + center;
	
	float3 corners[8];
	corners[0] = float3(0, 0, 0) + centeredOffset;
	corners[1] = float3(0, 0, size.z) + centeredOffset;
	corners[2] = float3(size.x, 0, size.z) + centeredOffset;
	corners[3] = float3(size.x, 0, 0) + centeredOffset;

	corners[4] = float3(0, size.y, 0) + centeredOffset;
	corners[5] = float3(0, size.y, size.z) + centeredOffset;
	corners[6] = float3(size.x, size.y, size.z) + centeredOffset;
	corners[7] = float3(size.x, size.y, 0) + centeredOffset;
	
	GlobalVertex inputs[24]; //4 corners and 6 sides
	
	//Top
	inputs[0] = NewGlobalVertex(corners[4], float2(0, 0));
	inputs[1] = NewGlobalVertex(corners[5], float2(0, 1));
	inputs[2] = NewGlobalVertex(corners[6], float2(1, 1));
	inputs[3] = NewGlobalVertex(corners[7], float2(1, 0));
	
	//Bottom
	inputs[4] = NewGlobalVertex(corners[3], float2(0, 0));
	inputs[5] = NewGlobalVertex(corners[2], float2(0, 1));
	inputs[6] = NewGlobalVertex(corners[1], float2(1, 1));
	inputs[7] = NewGlobalVertex(corners[0], float2(1, 0));
	
	//Left
	inputs[8] = NewGlobalVertex(corners[1], float2(0, 0));
	inputs[9] = NewGlobalVertex(corners[5], float2(0, 1));
	inputs[10] = NewGlobalVertex(corners[4], float2(1, 1));
	inputs[11] = NewGlobalVertex(corners[0], float2(1, 0));
	
	//Right
	inputs[12] = NewGlobalVertex(corners[3], float2(0, 0));
	inputs[13] = NewGlobalVertex(corners[7], float2(0, 1));
	inputs[14] = NewGlobalVertex(corners[6], float2(1, 1));
	inputs[15] = NewGlobalVertex(corners[2], float2(1, 0));
	
	//Forawrd
	inputs[16] = NewGlobalVertex(corners[2], float2(0, 0));
	inputs[17] = NewGlobalVertex(corners[6], float2(0, 1));
	inputs[18] = NewGlobalVertex(corners[5], float2(1, 1));
	inputs[19] = NewGlobalVertex(corners[1], float2(1, 0));
	
	//Back
	inputs[20] = NewGlobalVertex(corners[0], float2(0, 0));
	inputs[21] = NewGlobalVertex(corners[4], float2(0, 1));
	inputs[22] = NewGlobalVertex(corners[7], float2(1, 1));
	inputs[23] = NewGlobalVertex(corners[3], float2(1, 0));
	

	for (int i = 0; i < 6; i++)
	{
		AddTriangle(inputs[i * 4], inputs[i * 4 + 1], inputs[i * 4 + 2]);
		AddTriangle(inputs[i * 4], inputs[i * 4 + 2], inputs[i * 4 + 3]);
	}
}

void UpdateBounds(DrawTriangle tri)
{
	for (int i = 0; i < 3; i++)
	{
		GlobalVertex vertex = tri.vertices[i];
		
		float minX = _BoundsBuffer[0].x, minY = _BoundsBuffer[0].y, minZ = _BoundsBuffer[0].z;
		
		if (vertex.positionWS.x < minX)
		{
			minX = vertex.positionWS.x;
		}
		
		if (vertex.positionWS.y < minY)
		{
			minY = vertex.positionWS.y;
		}
		
		if (vertex.positionWS.z < minZ)
		{
			minZ = vertex.positionWS.z;
		}
		
		_BoundsBuffer[0] = float3(minX, minY, minZ);
		
		float maxX = _BoundsBuffer[1].x, maxY = _BoundsBuffer[1].y, maxZ = _BoundsBuffer[1].z;
		
		if (vertex.positionWS.x > maxX)
		{
			maxX = vertex.positionWS.x;
		}
		
		if (vertex.positionWS.y > maxY)
		{
			maxY = vertex.positionWS.y;
		}
		
		if (vertex.positionWS.z > maxZ)
		{
			maxZ = vertex.positionWS.z;
		}
		
		_BoundsBuffer[1] = float3(maxX, maxY, maxZ);
	}

}

float inverse_lerp(float a, float b, float l)
{
	return clamp((l - a) / (b - a), 0, 1);
}

uint LinearIndex(uint2 coordinate)
{
	return coordinate.x + coordinate.y * _XWidth;
}

bool HexEnabled(uint2 coordinate)
{
	return Enabled_Hexes_Buffer[LinearIndex(coordinate)] == 1.0f;
}

float HexHeight(uint2 coordinate)
{
	return Heights_Buffer[LinearIndex(coordinate)];
}

float Width()
{
	if (_Orientation < 2)
		return sqrt(3.0f) * _Radius;
	else
		return 2.0f * _Radius;
}

float Height()
{
	if (_Orientation < 2)
		return 2.0f * _Radius;
	else
		return sqrt(3.0f) * _Radius;
}

float WidthOffset()
{
	if (_Orientation < 2)
	{
		return sqrt(3.0f) * _Radius;
	}
	else
	{
		return 2.0f * _Radius * 3.0f / 4.0f;
	}
        
}

float HeightOffset()
{
	if (_Orientation < 2)
	{
		return 2.0f * _Radius * 3.0f / 4.0f;
	}
	else
	{
		return sqrt(3.0f) * _Radius;
	}
}

float3 Center(int2 coordinate)
{
	uint x = coordinate.x;
	uint y = coordinate.y;

	float3 center = float3(0, 0, 0);
	float3 offset = float3(0, 0, 0);

    //OddR
	if (_Orientation == 0)
	{
		if (y % 2 == 1 || y % 2 == -1)
		{
			offset = float3((Width() + _Spacing) / 2.0f, 0, 0);
		}
	}
    //EvenR
	else if (_Orientation == 1)
	{
		if (y % 2 == 0)
		{
			offset = float3((Width() + _Spacing) / 2.0f, 0, 0);
		}
	}
    //OddQ
	else if (_Orientation == 2)
	{
		if (x % 2 == 1 || x % 2 == -1)
		{
			offset = float3(0, (Height() + _Spacing) / 2.0f, 0);
		}
	}
    //EvenQ
	else if (_Orientation == 3)
	{
		if (x % 2 == 0)
		{
			offset = float3(0, (Height() + _Spacing) / 2.0f, 0);
		}
	}
	
	offset = float3(offset.x, offset.y, -HexHeight(coordinate));

	center = float3(x * (WidthOffset() + _Spacing), y * (HeightOffset() + _Spacing), 0) + offset + float3(Width(), Height(), 0);

	return center;
}

float3 Corner(int2 coordinate, uint index)
{
	float3 center = Center(coordinate);
	index %= 6;

	float startingDegree = (_Orientation >= 2) ? -0.0f : 30.0f;

	float degree = index * 60.0f + startingDegree;
	float rad = radians(degree);

	float3 corner = float3(cos(rad), sin(rad), 0) * _Radius + center;

    //if (moveTowardsCenter > 0)
    //{
    //    moveTowardsCenter = Mathf.Clamp(moveTowardsCenter, 0, Vector3.Distance(point, center));
    //    point = Vector3.MoveTowards(point, center, moveTowardsCenter);
    //}

	return corner;
}

void Corners(int2 coordinate, out float3 corners[6])
{
	for (int i = 0; i < 6; i++)
	{
		corners[i] = Corner(coordinate, i);
	}
}

float2 MinPoint()
{
	float3 minPoint = float3(0, 0, 0);

	minPoint = Center(int2(0, 0)); // -float3(Width() / 2.0f, Height() / 2.0f, 0);

	float3 otherPoint = float3(0, 0, 0);

	if (_YWidth > 1)
	{
		otherPoint = Center(int2(0, 1));

		if (otherPoint.x < minPoint.x)
		{
			minPoint = float3(otherPoint.x, minPoint.y, minPoint.z);
		}
	}

	if (_XWidth > 1)
	{
		otherPoint = Center(int2(1, 0));

		if (otherPoint.y < minPoint.y)
		{
			minPoint = float3(minPoint.x, otherPoint.y, minPoint.z);
		}
	}

	minPoint -= float3(Width() / 2.0f, Height() / 2.0f, 0);

	return minPoint.xy;
}

float2 MaxPoint()
{
	float3 maxPoint = float3(0, 0, 0);

	maxPoint = Center(int2(_XWidth - 1, _YWidth - 1)); // +float3(Width() / 2.0f, Height() / 2.0f, 0);

	float3 otherPoint = float3(0, 0, 0);

	if (_YWidth > 1)
	{
		otherPoint = Center(int2(_XWidth - 1, _YWidth - 2));

		if (otherPoint.x > maxPoint.x)
		{
			maxPoint = float3(otherPoint.x, maxPoint.y, maxPoint.z);
		}
	}

	if (_XWidth > 1)
	{
		otherPoint = Center(int2(_XWidth - 2, _YWidth - 1));

		if (otherPoint.y > maxPoint.y)
		{
			maxPoint = float3(maxPoint.x, otherPoint.y, maxPoint.z);
		}
	}

	maxPoint += float3(Width() / 2.0f, Height() / 2.0f, 0);

	return maxPoint.xy;
}

float2 UV(float3 vertex)
{
	float2 minPoint = MinPoint();
	float2 maxPoint = MaxPoint();

	return float2(inverse_lerp(minPoint.x, maxPoint.x, vertex.x), inverse_lerp(minPoint.y, maxPoint.y, vertex.y));
}

float2 CenteredUV(float3 vertex, int2 coordinate)
{
	float3 minPoint = Center(coordinate) - float3(Width() / 2.0f, Height() / 2.0f, 0);;
	float3 maxPoint = Center(coordinate) + float3(Width() / 2.0f, Height() / 2.0f, 0);;

	return float2(inverse_lerp(minPoint.x, maxPoint.x, vertex.x), inverse_lerp(minPoint.y, maxPoint.y, vertex.y));
}

void AddHexTriangles(uint2 coordinate)
{		
	float3 corners[6];
	float2 uvs[6];
	
	Corners(coordinate, corners);
	
	if (_UseCenteredUvs == 1.0f)
	{
		uvs[0] = CenteredUV(corners[0], coordinate);
		uvs[1] = CenteredUV(corners[1], coordinate);
		uvs[2] = CenteredUV(corners[2], coordinate);

		uvs[3] = CenteredUV(corners[3], coordinate);
		uvs[4] = CenteredUV(corners[4], coordinate);
		uvs[5] = CenteredUV(corners[5], coordinate);
	}
	else
	{
		uvs[0] = UV(corners[0]);
		uvs[1] = UV(corners[1]);
		uvs[2] = UV(corners[2]);

		uvs[3] = UV(corners[3]);
		uvs[4] = UV(corners[4]);
		uvs[5] = UV(corners[5]);
	}
	
	GlobalVertex globalVertices[6];
	
	globalVertices[0] = NewGlobalVertex(corners[0], uvs[0]);
	globalVertices[1] = NewGlobalVertex(corners[1], uvs[1]);
	globalVertices[2] = NewGlobalVertex(corners[2], uvs[2]);
	
	globalVertices[3] = NewGlobalVertex(corners[3], uvs[3]);
	globalVertices[4] = NewGlobalVertex(corners[4], uvs[4]);
	globalVertices[5] = NewGlobalVertex(corners[5], uvs[5]);
	
	AddTriangle(globalVertices[0], globalVertices[2], globalVertices[1]);
	AddTriangle(globalVertices[0], globalVertices[3], globalVertices[2]);

	AddTriangle(globalVertices[0], globalVertices[4], globalVertices[3]);
	AddTriangle(globalVertices[0], globalVertices[5], globalVertices[4]);

}

[numthreads(8, 8, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{	
	if (id.x >= _XWidth || id.y >= _YWidth || !HexEnabled(id.xy))
	{
		return;
	}
	
	AddHexTriangles(id.xy);
}


// Multiply the number of vertices by three to convert from triangles
[numthreads(1, 1, 1)]
void TriToVertCount(uint3 id : SV_DispatchThreadID)
{
	_IndirectArgsBuffer[0].numVerticesPerInstance *= 3;
}

// Calcuate bounds using vertices that were added to the vertices buffer during Main function
[numthreads(1, 1, 1)]
void CalculateBounds(uint3 id : SV_DispatchThreadID)
{
	float2 max = MaxPoint();
	float2 min = MinPoint();
	
	//max += min / 2.0f;
	
	_BoundsBuffer[0] = TransformToWorldSpaceF3(float3(min.x, min.y, 0));	
	_BoundsBuffer[1] = TransformToWorldSpaceF3(float3(max.x, max.y, 0.1f));
}