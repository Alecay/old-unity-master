#pragma kernel Main
#pragma kernel CalculateBounds

RWByteAddressBuffer VerticesBuffer;
RWByteAddressBuffer NormalsBuffer;
RWByteAddressBuffer UVsBuffer;
RWByteAddressBuffer ColorsBuffer;

uint _XWidth;
uint _YWidth;

uint _Orientation = 0;
float _Radius = 1.0f;
float _Spacing = 0.0f;

float _UseCenteredUvs = 0.0f;

float4 _Color = float4(1, 1, 1, 1);

RWStructuredBuffer<int> Hex_Indices_Buffer;
RWStructuredBuffer<float> Heights_Buffer;

RWStructuredBuffer<float2> Bounds_Buffer;

void StoreVertex(int index, float3 v)
{
	uint3 data = asuint(v);
	VerticesBuffer.Store3((index * 3) << 2, data);
}

void StoreNormal(int index, float3 v)
{
	uint3 data = asuint(v);
	NormalsBuffer.Store3((index * 3) << 2, data);
}

void StoreUV(int index, float3 v)
{
	uint3 data = asuint(v);
	UVsBuffer.Store3((index * 3) << 2, data);
}

void StoreColor(int index, float4 v)
{
	uint4 data = asuint(v);
	ColorsBuffer.Store4((index * 4) << 2, data);
}

float inverse_lerp(float a, float b, float l)
{
	return clamp((l - a) / (b - a), 0, 1);
}

uint LinearIndex(uint2 coordinate)
{
	return coordinate.x + coordinate.y * _XWidth;
}

int HexIndex(uint2 coordinate)
{
	return Hex_Indices_Buffer[LinearIndex(coordinate)] - 1;
}

bool HexEnabled(uint2 coordinate)
{
	return Hex_Indices_Buffer[LinearIndex(coordinate)] > 0;
}

float HexHeight(uint2 coordinate)
{
	return Heights_Buffer[LinearIndex(coordinate)];
}

float Width()
{
	if (_Orientation < 2)
		return sqrt(3.0f) * _Radius;
	else
		return 2.0f * _Radius;
}

float Height()
{
	if (_Orientation < 2)
		return 2.0f * _Radius;
	else
		return sqrt(3.0f) * _Radius;
}

float WidthOffset()
{
	if (_Orientation < 2)
	{
		return sqrt(3.0f) * _Radius;
	}
	else
	{
		return 2.0f * _Radius * 3.0f / 4.0f;
	}
        
}

float HeightOffset()
{
	if (_Orientation < 2)
	{
		return 2.0f * _Radius * 3.0f / 4.0f;
	}
	else
	{
		return sqrt(3.0f) * _Radius;
	}
}

float3 Center(int2 coordinate)
{
	uint x = coordinate.x;
	uint y = coordinate.y;

	float3 center = float3(0, 0, 0);
	float3 offset = float3(0, 0, 0);

    //OddR
	if (_Orientation == 0)
	{
		if (y % 2 == 1 || y % 2 == -1)
		{
			offset = float3((Width() + _Spacing) / 2.0f, 0, 0);
		}
	}
    //EvenR
	else if (_Orientation == 1)
	{
		if (y % 2 == 0)
		{
			offset = float3((Width() + _Spacing) / 2.0f, 0, 0);
		}
	}
    //OddQ
	else if (_Orientation == 2)
	{
		if (x % 2 == 1 || x % 2 == -1)
		{
			offset = float3(0, (Height() + _Spacing) / 2.0f, 0);
		}
	}
    //EvenQ
	else if (_Orientation == 3)
	{
		if (x % 2 == 0)
		{
			offset = float3(0, (Height() + _Spacing) / 2.0f, 0);
		}
	}
	
	offset = float3(offset.x, offset.y, -HexHeight(coordinate));

	center = float3(x * (WidthOffset() + _Spacing), y * (HeightOffset() + _Spacing), 0) + offset + float3(Width(), Height(), 0);

	return center;
}

float3 Corner(int2 coordinate, uint index)
{
	float3 center = Center(coordinate);
	index %= 6;

	float startingDegree = (_Orientation >= 2) ? -0.0f : 30.0f;

	float degree = index * 60.0f + startingDegree;
	float rad = radians(degree);

	float3 corner = float3(cos(rad), sin(rad), 0) * _Radius + center;

    //if (moveTowardsCenter > 0)
    //{
    //    moveTowardsCenter = Mathf.Clamp(moveTowardsCenter, 0, Vector3.Distance(point, center));
    //    point = Vector3.MoveTowards(point, center, moveTowardsCenter);
    //}

	return corner;
}

void Corners(int2 coordinate, out float3 corners[6])
{
	for (int i = 0; i < 6; i++)
	{
		corners[i] = Corner(coordinate, i);
	}
}

float2 MinPoint()
{
	float3 minPoint = float3(0, 0, 0);

	minPoint = Center(int2(0, 0)); // -float3(Width() / 2.0f, Height() / 2.0f, 0);

	float3 otherPoint = float3(0, 0, 0);

	if (_YWidth > 1)
	{
		otherPoint = Center(int2(0, 1));

		if (otherPoint.x < minPoint.x)
		{
			minPoint = float3(otherPoint.x, minPoint.y, minPoint.z);
		}
	}

	if (_XWidth > 1)
	{
		otherPoint = Center(int2(1, 0));

		if (otherPoint.y < minPoint.y)
		{
			minPoint = float3(minPoint.x, otherPoint.y, minPoint.z);
		}
	}

	minPoint -= float3(Width() / 2.0f, Height() / 2.0f, 0);

	return minPoint.xy;
}

float2 MaxPoint()
{
	float3 maxPoint = float3(0, 0, 0);

	maxPoint = Center(int2(_XWidth - 1, _YWidth - 1)); // +float3(Width() / 2.0f, Height() / 2.0f, 0);

	float3 otherPoint = float3(0, 0, 0);

	if (_YWidth > 1)
	{
		otherPoint = Center(int2(_XWidth - 1, _YWidth - 2));

		if (otherPoint.x > maxPoint.x)
		{
			maxPoint = float3(otherPoint.x, maxPoint.y, maxPoint.z);
		}
	}

	if (_XWidth > 1)
	{
		otherPoint = Center(int2(_XWidth - 2, _YWidth - 1));

		if (otherPoint.y > maxPoint.y)
		{
			maxPoint = float3(maxPoint.x, otherPoint.y, maxPoint.z);
		}
	}

	maxPoint += float3(Width() / 2.0f, Height() / 2.0f, 0);

	return maxPoint.xy;
}

float3 UV(float3 vertex, int index)
{
	float2 minPoint = MinPoint();
	float2 maxPoint = MaxPoint();

	return float3(inverse_lerp(minPoint.x, maxPoint.x, vertex.x), inverse_lerp(minPoint.y, maxPoint.y, vertex.y), index);
}

float3 CenteredUV(float3 vertex, int2 coordinate)
{
	float3 minPoint = Center(coordinate) - float3(Width() / 2.0f, Height() / 2.0f, 0);;
	float3 maxPoint = Center(coordinate) + float3(Width() / 2.0f, Height() / 2.0f, 0);;

	return float3(inverse_lerp(minPoint.x, maxPoint.x, vertex.x), inverse_lerp(minPoint.y, maxPoint.y, vertex.y), HexIndex(coordinate));
}

//Get the index of this hex by counting all the hexes that are enabled before it
int GetHexIndex(uint2 coordinate)
{
	int count = 0;
	int index = LinearIndex(coordinate);	
	int numHexes = _XWidth * _YWidth;
	
	for (uint i = 0; i < numHexes; i++)
	{
		if(i == index)
			break;
		
		if (Hex_Indices_Buffer[i] > 0)
			count++;
	}	
	
	return count;

}

void AddHexTriangles(uint2 coordinate)
{
	float3 corners[6];
	float3 uvs[6];
	
	Corners(coordinate, corners);
	int index = HexIndex(coordinate);
	
	if (_UseCenteredUvs == 1.0f)
	{
		uvs[0] = CenteredUV(corners[0], coordinate);
		uvs[1] = CenteredUV(corners[1], coordinate);
		uvs[2] = CenteredUV(corners[2], coordinate);

		uvs[3] = CenteredUV(corners[3], coordinate);
		uvs[4] = CenteredUV(corners[4], coordinate);
		uvs[5] = CenteredUV(corners[5], coordinate);
	}
	else
	{
		uvs[0] = UV(corners[0], index);
		uvs[1] = UV(corners[1], index);
		uvs[2] = UV(corners[2], index);

		uvs[3] = UV(corners[3], index);
		uvs[4] = UV(corners[4], index);
		uvs[5] = UV(corners[5], index);
	}
	
	int hexIndex = LinearIndex(coordinate); //GetHexIndex(coordinate); //LinearIndex(coordinate); //
	int triIndex = GetHexIndex(coordinate) * 6; //hexIndex * 6;
	
	////Add Triangle 1
	//StoreVertex(triIndex + 0, corners[0]);
	//StoreVertex(triIndex + 1, corners[2]);
	//StoreVertex(triIndex + 2, corners[1]);
	
	//StoreUV(triIndex + 0, uvs[0]);
	//StoreUV(triIndex + 1, uvs[2]);
	//StoreUV(triIndex + 2, uvs[1]);
	
	////Add Triangle 2
	//StoreVertex(triIndex + 3, corners[0]);
	//StoreVertex(triIndex + 4, corners[3]);
	//StoreVertex(triIndex + 5, corners[2]);

	//StoreUV(triIndex + 3, uvs[0]);
	//StoreUV(triIndex + 4, uvs[3]);
	//StoreUV(triIndex + 5, uvs[2]);
	
	////Add Triangle 3
	//StoreVertex(triIndex + 6, corners[0]);
	//StoreVertex(triIndex + 7, corners[4]);
	//StoreVertex(triIndex + 8, corners[3]);

	//StoreUV(triIndex + 6, uvs[0]);
	//StoreUV(triIndex + 7, uvs[4]);
	//StoreUV(triIndex + 8, uvs[3]);
	
	////Add Triangle 4
	//StoreVertex(triIndex + 9, corners[0]);
	//StoreVertex(triIndex + 10, corners[5]);
	//StoreVertex(triIndex + 11, corners[4]);

	//StoreUV(triIndex + 9, uvs[0]);
	//StoreUV(triIndex + 10, uvs[5]);
	//StoreUV(triIndex + 11, uvs[4]);
	
	float3 normal = float3(0, 0, -1);
	int c = 6;
	
	for (uint i = 0; i < 6; i++)
	{
		StoreVertex(triIndex + i, corners[i]);
		StoreUV(triIndex + i, uvs[i]);
		
		StoreNormal(triIndex + i, normal);
		StoreColor(triIndex + i, _Color);
	}
	
	//globalVertices[0] = NewGlobalVertex(corners[0], uvs[0]);
	//globalVertices[1] = NewGlobalVertex(corners[1], uvs[1]);
	//globalVertices[2] = NewGlobalVertex(corners[2], uvs[2]);
	
	//globalVertices[3] = NewGlobalVertex(corners[3], uvs[3]);
	//globalVertices[4] = NewGlobalVertex(corners[4], uvs[4]);
	//globalVertices[5] = NewGlobalVertex(corners[5], uvs[5]);
	
	//AddTriangle(globalVertices[0], globalVertices[2], globalVertices[1]);
	//AddTriangle(globalVertices[0], globalVertices[3], globalVertices[2]);

	//AddTriangle(globalVertices[0], globalVertices[4], globalVertices[3]);
	//AddTriangle(globalVertices[0], globalVertices[5], globalVertices[4]);

}

[numthreads(8, 8, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _XWidth || id.y >= _YWidth || !HexEnabled(id.xy))
	{
		return;
	}
	
	AddHexTriangles(id.xy);
}

[numthreads(1, 1, 1)]
void CalculateBounds(uint3 id : SV_DispatchThreadID)
{
	float2 min = MinPoint();
	float2 max = MaxPoint();
	
	float2 size = max - min;
	float2 center = min + size / 2.0f;
	
	Bounds_Buffer[0] = center;
	Bounds_Buffer[1] = size;

}