#pragma kernel Main

#include "MarchTables.hlsl"


static const int numThreads = 8;

RWStructuredBuffer<float> _Density_Values_Buffer;

RWStructuredBuffer<int> _Triangles_Per_Voxel_Buffer;

RWStructuredBuffer<int> _Overall_Triangle_Count_Buffer;

int numPointsPerAxis;
float isoLevel;
bool interpolate;

int meshSimplificationLevel = 0; // 0 no simiplifcation

float3 interpolateVerts(float4 v1, float4 v2)
{
	float t = (isoLevel - v1.w) / (v2.w - v1.w);
	return v1.xyz + t * (v2.xyz - v1.xyz);
}

int indexFromCoord(int x, int y, int z)
{
	return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

int indexFromCoord(int3 id)
{
	return indexFromCoord(id.x, id.y, id.z);
}

float2 GetUV(float3 p)
{
	float2 uv;
	
	uv = float2(p.x / (float) numPointsPerAxis, p.z / (float) numPointsPerAxis);
	
	return uv;
}

//Gets the nth factor of num
int GetFactor(uint num, int n)
{
	uint testNum = 1;
	int currentFactorIndex = 0;
	int lastFactor = 1;
	
	if (n <= 0 || num <= 1)
	{
		return 1;
	}
	
	//increase testNum while it's less than or equal to num
	while (testNum < num)
	{
		//If testNum is a factor of num
		if (num % testNum == 0)
		{
			//Save this testNum in lastFactor
			lastFactor = testNum;
			
			//If the currentIndex == the desired index N then return testNum
			if (currentFactorIndex == n)
			{
				return testNum;
			}
			
			//Every found factor increment the index
			currentFactorIndex++;
		}
	
		testNum++;
	}
	
	return lastFactor;
}

[numthreads(numThreads, numThreads, numThreads)]
void Main(int3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points
	if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1)
	{
		return;
	}
	
	int increment = GetFactor(numPointsPerAxis - 1, meshSimplificationLevel);
	
	if (increment < 0)
	{
		increment = 1;
	}
	
	if (id.x % (uint) increment > 0 || id.y % (uint) increment > 0 || id.z % (uint) increment > 0)
	{
		return;
	}
	
	// 8 corners of the current cube
	
	int3 offsets[8];
	
	offsets[0] = int3(id.x, id.y, id.z);
	offsets[1] = int3(id.x + increment, id.y, id.z);
	offsets[2] = int3(id.x + increment, id.y, id.z + increment);
	offsets[3] = int3(id.x, id.y, id.z + increment);

	offsets[4] = int3(id.x, id.y + increment, id.z);
	offsets[5] = int3(id.x + increment, id.y + increment, id.z);
	offsets[6] = int3(id.x + increment, id.y + increment, id.z + increment);
	offsets[7] = int3(id.x, id.y + increment, id.z + increment);

	float densityValues[8];
	
	densityValues[0] = _Density_Values_Buffer[indexFromCoord(offsets[0])];
	densityValues[1] = _Density_Values_Buffer[indexFromCoord(offsets[1])];
	densityValues[2] = _Density_Values_Buffer[indexFromCoord(offsets[2])];
	densityValues[3] = _Density_Values_Buffer[indexFromCoord(offsets[3])];

	densityValues[4] = _Density_Values_Buffer[indexFromCoord(offsets[4])];
	densityValues[5] = _Density_Values_Buffer[indexFromCoord(offsets[5])];
	densityValues[6] = _Density_Values_Buffer[indexFromCoord(offsets[6])];
	densityValues[7] = _Density_Values_Buffer[indexFromCoord(offsets[7])];
	
	
	float4 cubeCorners[8];
	
	cubeCorners[0] = float4(offsets[0], densityValues[0]);
	cubeCorners[1] = float4(offsets[1], densityValues[1]);
	cubeCorners[2] = float4(offsets[2], densityValues[2]);
	cubeCorners[3] = float4(offsets[3], densityValues[3]);
	
	cubeCorners[4] = float4(offsets[4], densityValues[4]);
	cubeCorners[5] = float4(offsets[5], densityValues[5]);
	cubeCorners[6] = float4(offsets[6], densityValues[6]);
	cubeCorners[7] = float4(offsets[7], densityValues[7]);
	
	//float4 cubeCorners[8] =
	//{
	//	points[indexFromCoord(id.x, id.y, id.z)],
 //       points[indexFromCoord(id.x + increment, id.y, id.z)],
 //       points[indexFromCoord(id.x + increment, id.y, id.z + increment)],
 //       points[indexFromCoord(id.x, id.y, id.z + increment)],
 //       points[indexFromCoord(id.x, id.y + increment, id.z)],
 //       points[indexFromCoord(id.x + increment, id.y + increment, id.z)],
 //       points[indexFromCoord(id.x + increment, id.y + increment, id.z + increment)],
 //       points[indexFromCoord(id.x, id.y + increment, id.z + increment)]
	//};

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
	int cubeIndex = 0;
	if (cubeCorners[0].w < isoLevel)
		cubeIndex |= 1;
	if (cubeCorners[1].w < isoLevel)
		cubeIndex |= 2;
	if (cubeCorners[2].w < isoLevel)
		cubeIndex |= 4;
	if (cubeCorners[3].w < isoLevel)
		cubeIndex |= 8;
	if (cubeCorners[4].w < isoLevel)
		cubeIndex |= 16;
	if (cubeCorners[5].w < isoLevel)
		cubeIndex |= 32;
	if (cubeCorners[6].w < isoLevel)
		cubeIndex |= 64;
	if (cubeCorners[7].w < isoLevel)
		cubeIndex |= 128;

    // Create triangles for current cube configuration
	for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
	{
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
		int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
		int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

		int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
		int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

		int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
		int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

		float3 triPoints[3];
		//DrawTriangle dTri;
		
		if (interpolate)
		{
			triPoints[0] = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
			triPoints[1] = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
			triPoints[2] = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
		}
		else
		{
			triPoints[0] = cubeCorners[a0].xyz;
			triPoints[1] = cubeCorners[a1].xyz;
			triPoints[2] = cubeCorners[a2].xyz;
		}
		
		
		
		//float4 color = float4(1, 1, 1, 1);
		
		//dTri = GetDrawTriangle(
		//NewGlobalVertex(triPoints[2], GetUV(triPoints[2]), color),
		//NewGlobalVertex(triPoints[1], GetUV(triPoints[1]), color),
		//NewGlobalVertex(triPoints[0], GetUV(triPoints[0]), color)
		//);
		
		//AddTriangle(dTri);

	}

}

// Calcuate bounds using vertices that were added to the vertices buffer during Main function
//[numthreads(1, 1, 1)]
//void CalculateBounds(uint3 id : SV_DispatchThreadID)
//{
//	_BoundsBuffer[0] = TransformToWorldSpaceF3(float3(0, 0, 0));
//	_BoundsBuffer[1] = TransformToWorldSpaceF3(float3(numPointsPerAxis - 1, numPointsPerAxis - 1, numPointsPerAxis - 1));
//}